{"mappings":"qhBA2BA,IAAAA,EAAAC,EAAA,SAOwB,SAAfC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAdAO,SAASC,cAAc,SAE/BC,iBAAiB,UAiBA,SAAAC,GACpBA,EAAEC,iBAEF,IAAIC,EAAaC,OAAOH,EAAEI,cAAcC,SAASf,MAAMgB,OACxC,MAATC,EAAYJ,OAAOH,EAAEI,cAAcC,SAASG,KAAKF,OACjDG,EAAcN,OAAOH,EAAEI,cAAcC,SAASK,OAAOJ,OAEX,IAA3C,IAAIK,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EACrCvB,EAAcuB,EAAGT,GACdU,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqB1B,QAAiBC,MAAU,IAGnD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA3B,GAAS4B,OAAOG,QACd,sBAAoB5B,QAAeC,MAAU,IAInDY,GAAcK,C","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) \n// стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position),\n// що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується \n// або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть \n// властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код \n// функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n\nimport Notiflix from 'notiflix';   // бібліотека для відображення повідомлень користувачеві, замість window.alert()\n\nconst form = document.querySelector('.form');  // посилання на форму\n\nform.addEventListener('submit', onFormSubmit); // прослуховувач форми\n\n// функція для виклика промісу\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n//фунція виконання сабміту\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  let delayInput = Number(e.currentTarget.elements.delay.value); // значеня затримкі\n  const stepInput = Number(e.currentTarget.elements.step.value);  // значеня кроків\n  const amountInput = Number(e.currentTarget.elements.amount.value);  // значення кількості викликів функції створення промісу\n\n  for (let i = 1; i <= amountInput; i += 1) {\n    createPromise(i, delayInput)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delayInput += stepInput;\n  }\n}"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","e","preventDefault","delayInput","Number","currentTarget","elements","value","stepInput","step","amountInput","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.2ab7497e.js.map"}